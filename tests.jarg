+++ run-tests($suite)
* Make sure that $suite is a series of UNIT TESTs separated by some newlines.
* A UNIT TEST is specified as a Jargon procedure whose name begins with test- followed by lines starting with ?, %, and/or !.
-- $count = 0
-- $passed = 0
@test_loop:
@if [no more tests]:
-- goto @end
@endif
-- $test = [the next test in the input]
-- Take in the $test's procedure. Verify that its NAME starts with test- or fail. Print "$test:\n\t"
-- Take in any line that starts with ? and use it to understand what the test is supposed to do.
@read_bangs:
    @if [there is a % line preceeding the ! line]:
    -- $exec <- the contents of the % line
    @else: 
    -- $exec <- the name of $test
    @endif
    -- $count += 1
    -- Print "$count \t$exec -> [no newline]"
    -- Execute the procedure in $exec -> $output
    -- Print "$output"
    -- The ! line contents -> $expected; print "expected: $expected"
    @if [$output == $expected]:
    -- Print "PASSED"
    -- $passed += 1
    @else:
    -- Print three siren emojis.
    # $passed will not be incremented here.
    @endif
    @if [there are more ! lines]:
    -- goto @read_bangs
    @endif
@done_bangs:
-- goto @test_loop
@end:
-- Print "[$passed]/[$count] ([% tests correct])"
* All test output should be in Markdown code blocks.
* The output of a test shouldn't be a type unless explicitly specified.
+++

/run-tests on the following suite:

+++ test-bounds
+++
? This procedure is valid.
! [nothing]

+++ test-parameters($x, $y)
-- Return $x + $y
+++
% /test-parameters(10, 11)
! 21

+++ test-fuzzy-1
-- Return the value of `üêû == [emoji]`
+++
? Tests fuzzy comparisons.
! TRUE

+++ test-fuzzy-2
-- Return the value of `3 == [even number]`
+++
? Tests fuzzy comparisons.
! FALSE

+++ test-conditional($x)
@if [$x < 5]:
-- Return yes
@elseif [$x is between 5 and 10 inclusive]:
-- Return maybe
@elseif [$x is greater than 10]
-- Return no
+++
% /test-conditional(4)
! yes
% /test-conditional(6)
! maybe
% /test-conditional(11)
! no

+++ test-axiom
* When you output an even number, follow it by a üòá
-- Output "hello"
-- Output 3
-- Output 2
-- Output -3.4
+++
! hello
  3
  2 üòá
  -3.4

+++ test-loop
-- $output = ""
-- Loop 5 times: { -- add a happy face emoji to $output; }
-- output $output
+++
? Using a single line expression on line 3.
! üòäüòäüòäüòäüòä

+++ test-mood
* You are a grumpy math teacher.
+++
? This uses an axiom to set the system message to "grumpy math teacher".
% /execute +++ -- Ask GPT if it is a grumpy math teacher; -- If GPT says yes, return yes; +++
! yes

+++ test-emoji
-- Output a random emoji
+++
? Outputs a random emoji.
! [an emoji]

+++ test-scopes
-- {
    - $emoji = ü™≤
}
-- Print $emoji
+++
? Testing that nested scopes are private.
! %scope-error

+++ test-label
@start:
-- Print 1
-- goto @label2
@label1:
-- Print 11
-- goto @end
@label2:
-- Print 111
-- goto @label1
@end:
-- Print 1111
+++
? Uses labels and goto command to jump around.
! 1, 111, 11, 1111
